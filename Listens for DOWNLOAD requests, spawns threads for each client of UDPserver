import socket
import threading
import base64
import os
import random
import sys


def handle_file_transmission(filename, client_address, server_port):
    """Handle data requests for a specific file in a separate thread."""
    try:
        # Create new socket for this client
        data_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        data_port = random.randint(50000, 51000)
        data_socket.bind(("", data_port))

        # Send OK response with file size and port
        file_size = os.path.getsize(filename)
        response = f"OK {filename} SIZE {file_size} PORT {data_port}"
        data_socket.sendto(response.encode(), client_address)

        with open(filename, 'rb') as f:
            while True:
                data_socket.settimeout(5.0)
                try:
                    request, client_addr = data_socket.receivefrom(4096)
                    parts = request.decode().strip().split()
                    if parts[0] != "FILE" or parts[1] != filename:
                        continue

                    if parts[2] == "CLOSE":
                        data_socket.sendto(f"FILE {filename} CLOSE_OK".encode(), client_addr)
                        break

                    if parts[2] == "GET":
                        start = int(parts[4])
                        end = int(parts[6])
                        if start < 0 or end >= file_size or start > end:
                            continue
                        f.seek(start)
                        data = f.read(end - start + 1)
                        base64_data = base64.b64encode(data).decode()
                        response = f"FILE {filename} OK START {start} END {end} DATA {base64_data}"
                        data_socket.sendto(response.encode(), client_addr)
                except socket.timeout:
                    continue
    except Exception as e:
        print(f"Error handling {filename} for {client_address}: {e}")
    finally:
        data_socket.close()
